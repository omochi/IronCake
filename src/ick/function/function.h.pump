#pragma once

#include "../base/macro.h"
#include "../base/memory.h"
#include "../base/property.h"

#include "base_function_holder.h"
#include "native_function_binder.h"

namespace ick {
	template <typename F> class Function;
	$var an_max = 8
	$range an 0..an_max
	$for an [[
	$range ai 1..an

	template <typename R$for ai [[, typename A$ai]]>
	class Function<R(*)($for ai , [[A$ai]])>{
	public:
		typedef R (*FunctionType)($for ai , [[A$ai]]);
		typedef Function<FunctionType> ThisType;
	private:
		BaseFunctionHolder<FunctionType> * holder_;
	public:
		BaseFunctionHolder<FunctionType> * holder() const { return holder_; }

		Function():
		holder_(NULL)
		{
		}
		// ネイティブ関数からの暗黙変換
		// explicit
		Function(FunctionType native_function):
		holder_(ICK_NEW(NativeFunctionBinder<FunctionType ICK_COMMA 0>,
						native_function))
		{
		}
		// holderの所有権を受け取る
		Function(BaseFunctionHolder<FunctionType> * holder):
		holder_(holder)
		{
		}
		Function(const ThisType & copy):
		holder_(NULL)
		{
			*this = copy;
		}
		virtual ~Function(){
			PropertyClear(holder_);
		}
		ThisType & operator = (const ThisType & copy){
			PropertySet(holder_, copy.holder_->Clone());
			return * this;
		}
		R operator() ($for ai , [[A$ai a$ai]]) { 
			return (*holder_)($for ai , [[a$ai]]); 
		}
	};

	]]
	

}

