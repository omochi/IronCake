// This file was GENERATED by command:
//     pump.py function_bind.h.pump
// DO NOT EDIT BY HAND!!!

#pragma once

#include "../base/memory.h"

#include "function_bind_decl.h"
#include "native_function_holder.h"
#include "function.h"
#include "function_binder.h"
#include "method_binder.h"

namespace ick {

	// 引数0個のメソッドに、
	// thisと0個の引数をbindして、
	// 引数0個の関数にする。
	template <class T, typename R>
	Function<R(*)()>
	FunctionBind(R(T::*method)(), T * instance){
		typedef Function<R(*)()> Bound;
		typedef MethodBinder<R(T::*)(), 0> Binder;
		return Bound(ICK_NEW(Binder, method, instance), true);
	}


	// 引数1個のメソッドに、
	// thisと0個の引数をbindして、
	// 引数1個の関数にする。
	template <class T, typename R, typename A1>
	Function<R(*)(A1)>
	FunctionBind(R(T::*method)(A1), T * instance){
		typedef Function<R(*)(A1)> Bound;
		typedef MethodBinder<R(T::*)(A1), 0> Binder;
		return Bound(ICK_NEW(Binder, method, instance), true);
	}


	// 引数1個の関数に、1個の引数をbindして、
	// 引数0個の関数にする。
	template <typename R, typename A1>
	Function<R(*)()>
	FunctionBind(R(*native_function)(A1), A1 a1){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1), 1> Binder;
		typedef NativeFunctionHolder<R(*)(A1)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1), true);
	}

	template <typename R, typename A1>
	Function<R(*)()>
	FunctionBind(Function<R(*)(A1)> function , A1 a1){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1), 1> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1), true);
	}


	// 引数1個のメソッドに、
	// thisと1個の引数をbindして、
	// 引数0個の関数にする。
	template <class T, typename R, typename A1>
	Function<R(*)()>
	FunctionBind(R(T::*method)(A1), T * instance, A1 a1){
		typedef Function<R(*)()> Bound;
		typedef MethodBinder<R(T::*)(A1), 1> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1), true);
	}


	// 引数2個のメソッドに、
	// thisと0個の引数をbindして、
	// 引数2個の関数にする。
	template <class T, typename R, typename A1, typename A2>
	Function<R(*)(A1, A2)>
	FunctionBind(R(T::*method)(A1, A2), T * instance){
		typedef Function<R(*)(A1, A2)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2), 0> Binder;
		return Bound(ICK_NEW(Binder, method, instance), true);
	}


	// 引数2個の関数に、1個の引数をbindして、
	// 引数1個の関数にする。
	template <typename R, typename A1, typename A2>
	Function<R(*)(A2)>
	FunctionBind(R(*native_function)(A1, A2), A1 a1){
		typedef Function<R(*)(A2)> Bound;
		typedef FunctionBinder<R(*)(A1, A2), 1> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1), true);
	}

	template <typename R, typename A1, typename A2>
	Function<R(*)(A2)>
	FunctionBind(Function<R(*)(A1, A2)> function , A1 a1){
		typedef Function<R(*)(A2)> Bound;
		typedef FunctionBinder<R(*)(A1, A2), 1> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1), true);
	}


	// 引数2個のメソッドに、
	// thisと1個の引数をbindして、
	// 引数1個の関数にする。
	template <class T, typename R, typename A1, typename A2>
	Function<R(*)(A2)>
	FunctionBind(R(T::*method)(A1, A2), T * instance, A1 a1){
		typedef Function<R(*)(A2)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2), 1> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1), true);
	}


	// 引数2個の関数に、2個の引数をbindして、
	// 引数0個の関数にする。
	template <typename R, typename A1, typename A2>
	Function<R(*)()>
	FunctionBind(R(*native_function)(A1, A2), A1 a1, A2 a2){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2), 2> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2), true);
	}

	template <typename R, typename A1, typename A2>
	Function<R(*)()>
	FunctionBind(Function<R(*)(A1, A2)> function , A1 a1, A2 a2){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2), 2> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2), true);
	}


	// 引数2個のメソッドに、
	// thisと2個の引数をbindして、
	// 引数0個の関数にする。
	template <class T, typename R, typename A1, typename A2>
	Function<R(*)()>
	FunctionBind(R(T::*method)(A1, A2), T * instance, A1 a1, A2 a2){
		typedef Function<R(*)()> Bound;
		typedef MethodBinder<R(T::*)(A1, A2), 2> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2), true);
	}


	// 引数3個のメソッドに、
	// thisと0個の引数をbindして、
	// 引数3個の関数にする。
	template <class T, typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A1, A2, A3)>
	FunctionBind(R(T::*method)(A1, A2, A3), T * instance){
		typedef Function<R(*)(A1, A2, A3)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3), 0> Binder;
		return Bound(ICK_NEW(Binder, method, instance), true);
	}


	// 引数3個の関数に、1個の引数をbindして、
	// 引数2個の関数にする。
	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A2, A3)>
	FunctionBind(R(*native_function)(A1, A2, A3), A1 a1){
		typedef Function<R(*)(A2, A3)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3), 1> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1), true);
	}

	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A2, A3)>
	FunctionBind(Function<R(*)(A1, A2, A3)> function , A1 a1){
		typedef Function<R(*)(A2, A3)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3), 1> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1), true);
	}


	// 引数3個のメソッドに、
	// thisと1個の引数をbindして、
	// 引数2個の関数にする。
	template <class T, typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A2, A3)>
	FunctionBind(R(T::*method)(A1, A2, A3), T * instance, A1 a1){
		typedef Function<R(*)(A2, A3)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3), 1> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1), true);
	}


	// 引数3個の関数に、2個の引数をbindして、
	// 引数1個の関数にする。
	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A3)>
	FunctionBind(R(*native_function)(A1, A2, A3), A1 a1, A2 a2){
		typedef Function<R(*)(A3)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3), 2> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2), true);
	}

	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A3)>
	FunctionBind(Function<R(*)(A1, A2, A3)> function , A1 a1, A2 a2){
		typedef Function<R(*)(A3)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3), 2> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2), true);
	}


	// 引数3個のメソッドに、
	// thisと2個の引数をbindして、
	// 引数1個の関数にする。
	template <class T, typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A3)>
	FunctionBind(R(T::*method)(A1, A2, A3), T * instance, A1 a1, A2 a2){
		typedef Function<R(*)(A3)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3), 2> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2), true);
	}


	// 引数3個の関数に、3個の引数をbindして、
	// 引数0個の関数にする。
	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)()>
	FunctionBind(R(*native_function)(A1, A2, A3), A1 a1, A2 a2, A3 a3){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3), 3> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3), true);
	}

	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)()>
	FunctionBind(Function<R(*)(A1, A2, A3)> function , A1 a1, A2 a2, A3 a3){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3), 3> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3), true);
	}


	// 引数3個のメソッドに、
	// thisと3個の引数をbindして、
	// 引数0個の関数にする。
	template <class T, typename R, typename A1, typename A2, typename A3>
	Function<R(*)()>
	FunctionBind(R(T::*method)(A1, A2, A3), T * instance, A1 a1, A2 a2, A3 a3){
		typedef Function<R(*)()> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3), 3> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3), true);
	}


	// 引数4個のメソッドに、
	// thisと0個の引数をbindして、
	// 引数4個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4>
	Function<R(*)(A1, A2, A3, A4)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4), T * instance){
		typedef Function<R(*)(A1, A2, A3, A4)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4), 0> Binder;
		return Bound(ICK_NEW(Binder, method, instance), true);
	}


	// 引数4個の関数に、1個の引数をbindして、
	// 引数3個の関数にする。
	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A2, A3, A4)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4), A1 a1){
		typedef Function<R(*)(A2, A3, A4)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4), 1> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1), true);
	}

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A2, A3, A4)>
	FunctionBind(Function<R(*)(A1, A2, A3, A4)> function , A1 a1){
		typedef Function<R(*)(A2, A3, A4)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4), 1> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1), true);
	}


	// 引数4個のメソッドに、
	// thisと1個の引数をbindして、
	// 引数3個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4>
	Function<R(*)(A2, A3, A4)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4), T * instance, A1 a1){
		typedef Function<R(*)(A2, A3, A4)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4), 1> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1), true);
	}


	// 引数4個の関数に、2個の引数をbindして、
	// 引数2個の関数にする。
	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A3, A4)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4), A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4), 2> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2), true);
	}

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A3, A4)>
	FunctionBind(Function<R(*)(A1, A2, A3, A4)> function , A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4), 2> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2), true);
	}


	// 引数4個のメソッドに、
	// thisと2個の引数をbindして、
	// 引数2個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4>
	Function<R(*)(A3, A4)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4), T * instance, A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4), 2> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2), true);
	}


	// 引数4個の関数に、3個の引数をbindして、
	// 引数1個の関数にする。
	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A4)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3){
		typedef Function<R(*)(A4)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4), 3> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3), true);
	}

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A4)>
	FunctionBind(Function<R(*)(A1, A2, A3, A4)> function , A1 a1, A2 a2, A3 a3){
		typedef Function<R(*)(A4)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4), 3> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3), true);
	}


	// 引数4個のメソッドに、
	// thisと3個の引数をbindして、
	// 引数1個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4>
	Function<R(*)(A4)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4), T * instance, A1 a1, A2 a2, A3 a3){
		typedef Function<R(*)(A4)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4), 3> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3), true);
	}


	// 引数4個の関数に、4個の引数をbindして、
	// 引数0個の関数にする。
	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)()>
	FunctionBind(R(*native_function)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3, A4 a4){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4), 4> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4), true);
	}

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)()>
 FunctionBind(Function<R(*)(A1, A2, A3, A4)> function , A1 a1, A2 a2, A3 a3,
     A4 a4){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4), 4> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4), true);
	}


	// 引数4個のメソッドに、
	// thisと4個の引数をbindして、
	// 引数0個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4>
	Function<R(*)()>
 FunctionBind(R(T::*method)(A1, A2, A3, A4), T * instance, A1 a1, A2 a2, A3 a3,
     A4 a4){
		typedef Function<R(*)()> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4), 4> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4), true);
	}


	// 引数5個のメソッドに、
	// thisと0個の引数をbindして、
	// 引数5個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5>
	Function<R(*)(A1, A2, A3, A4, A5)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4, A5), T * instance){
		typedef Function<R(*)(A1, A2, A3, A4, A5)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5), 0> Binder;
		return Bound(ICK_NEW(Binder, method, instance), true);
	}


	// 引数5個の関数に、1個の引数をbindして、
	// 引数4個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A2, A3, A4, A5)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4, A5), A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 1> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A2, A3, A4, A5)>
	FunctionBind(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 1> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1), true);
	}


	// 引数5個のメソッドに、
	// thisと1個の引数をbindして、
	// 引数4個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5>
	Function<R(*)(A2, A3, A4, A5)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4, A5), T * instance, A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5), 1> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1), true);
	}


	// 引数5個の関数に、2個の引数をbindして、
	// 引数3個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A3, A4, A5)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4, A5), A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4, A5)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 2> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A3, A4, A5)>
	FunctionBind(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4, A5)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 2> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2), true);
	}


	// 引数5個のメソッドに、
	// thisと2個の引数をbindして、
	// 引数3個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5>
	Function<R(*)(A3, A4, A5)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4, A5), T * instance, A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4, A5)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5), 2> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2), true);
	}


	// 引数5個の関数に、3個の引数をbindして、
	// 引数2個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A4, A5)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3){
		typedef Function<R(*)(A4, A5)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 3> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A4, A5)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1, A2 a2,
     A3 a3){
		typedef Function<R(*)(A4, A5)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 3> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3), true);
	}


	// 引数5個のメソッドに、
	// thisと3個の引数をbindして、
	// 引数2個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5>
	Function<R(*)(A4, A5)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5), T * instance, A1 a1, A2 a2,
     A3 a3){
		typedef Function<R(*)(A4, A5)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5), 3> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3), true);
	}


	// 引数5個の関数に、4個の引数をbindして、
	// 引数1個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A5)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3,
     A4 a4){
		typedef Function<R(*)(A5)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 4> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A5)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1, A2 a2,
     A3 a3, A4 a4){
		typedef Function<R(*)(A5)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 4> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4), true);
	}


	// 引数5個のメソッドに、
	// thisと4個の引数をbindして、
	// 引数1個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5>
	Function<R(*)(A5)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5), T * instance, A1 a1, A2 a2,
     A3 a3, A4 a4){
		typedef Function<R(*)(A5)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5), 4> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4), true);
	}


	// 引数5個の関数に、5個の引数をbindして、
	// 引数0個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)()>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3,
     A4 a4, A5 a5){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 5> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)()>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5), 5> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5), true);
	}


	// 引数5個のメソッドに、
	// thisと5個の引数をbindして、
	// 引数0個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5>
	Function<R(*)()>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5), T * instance, A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)()> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5), 5> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5), true);
	}


	// 引数6個のメソッドに、
	// thisと0個の引数をbindして、
	// 引数6個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6>
	Function<R(*)(A1, A2, A3, A4, A5, A6)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6), T * instance){
		typedef Function<R(*)(A1, A2, A3, A4, A5, A6)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6), 0> Binder;
		return Bound(ICK_NEW(Binder, method, instance), true);
	}


	// 引数6個の関数に、1個の引数をbindして、
	// 引数5個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A2, A3, A4, A5, A6)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6), A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5, A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 1> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A2, A3, A4, A5, A6)>
	FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5, A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 1> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1), true);
	}


	// 引数6個のメソッドに、
	// thisと1個の引数をbindして、
	// 引数5個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6>
	Function<R(*)(A2, A3, A4, A5, A6)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6), T * instance, A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5, A6)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6), 1> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1), true);
	}


	// 引数6個の関数に、2個の引数をbindして、
	// 引数4個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A3, A4, A5, A6)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4, A5, A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 2> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A3, A4, A5, A6)>
	FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4, A5, A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 2> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2), true);
	}


	// 引数6個のメソッドに、
	// thisと2個の引数をbindして、
	// 引数4個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6>
	Function<R(*)(A3, A4, A5, A6)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6), T * instance, A1 a1,
     A2 a2){
		typedef Function<R(*)(A3, A4, A5, A6)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6), 2> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2), true);
	}


	// 引数6個の関数に、3個の引数をbindして、
	// 引数3個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A4, A5, A6)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3){
		typedef Function<R(*)(A4, A5, A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 3> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A4, A5, A6)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2,
     A3 a3){
		typedef Function<R(*)(A4, A5, A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 3> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3), true);
	}


	// 引数6個のメソッドに、
	// thisと3個の引数をbindして、
	// 引数3個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6>
	Function<R(*)(A4, A5, A6)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6), T * instance, A1 a1,
     A2 a2, A3 a3){
		typedef Function<R(*)(A4, A5, A6)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6), 3> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3), true);
	}


	// 引数6個の関数に、4個の引数をbindして、
	// 引数2個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A5, A6)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3,
     A4 a4){
		typedef Function<R(*)(A5, A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 4> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A5, A6)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2,
     A3 a3, A4 a4){
		typedef Function<R(*)(A5, A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 4> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4), true);
	}


	// 引数6個のメソッドに、
	// thisと4個の引数をbindして、
	// 引数2個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6>
	Function<R(*)(A5, A6)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6), T * instance, A1 a1,
     A2 a2, A3 a3, A4 a4){
		typedef Function<R(*)(A5, A6)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6), 4> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4), true);
	}


	// 引数6個の関数に、5個の引数をbindして、
	// 引数1個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A6)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3,
     A4 a4, A5 a5){
		typedef Function<R(*)(A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 5> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A6)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)(A6)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 5> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5), true);
	}


	// 引数6個のメソッドに、
	// thisと5個の引数をbindして、
	// 引数1個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6>
	Function<R(*)(A6)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6), T * instance, A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)(A6)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6), 5> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5), true);
	}


	// 引数6個の関数に、6個の引数をbindして、
	// 引数0個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)()>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3,
     A4 a4, A5 a5, A6 a6){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 6> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5, a6), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)()>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5, A6 a6){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6), 6> Binder;
  return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5, a6),
      true);
	}


	// 引数6個のメソッドに、
	// thisと6個の引数をbindして、
	// 引数0個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6>
	Function<R(*)()>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6), T * instance, A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){
		typedef Function<R(*)()> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6), 6> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5, a6), true);
	}


	// 引数7個のメソッドに、
	// thisと0個の引数をbindして、
	// 引数7個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7>
	Function<R(*)(A1, A2, A3, A4, A5, A6, A7)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7), T * instance){
		typedef Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7), 0> Binder;
		return Bound(ICK_NEW(Binder, method, instance), true);
	}


	// 引数7個の関数に、1個の引数をbindして、
	// 引数6個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A2, A3, A4, A5, A6, A7)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7), A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5, A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 1> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A2, A3, A4, A5, A6, A7)>
	FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5, A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 1> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1), true);
	}


	// 引数7個のメソッドに、
	// thisと1個の引数をbindして、
	// 引数6個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7>
	Function<R(*)(A2, A3, A4, A5, A6, A7)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7), T * instance, A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5, A6, A7)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7), 1> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1), true);
	}


	// 引数7個の関数に、2個の引数をbindして、
	// 引数5個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A3, A4, A5, A6, A7)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4, A5, A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 2> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A3, A4, A5, A6, A7)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2){
		typedef Function<R(*)(A3, A4, A5, A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 2> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2), true);
	}


	// 引数7個のメソッドに、
	// thisと2個の引数をbindして、
	// 引数5個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7>
	Function<R(*)(A3, A4, A5, A6, A7)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7), T * instance, A1 a1,
     A2 a2){
		typedef Function<R(*)(A3, A4, A5, A6, A7)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7), 2> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2), true);
	}


	// 引数7個の関数に、3個の引数をbindして、
	// 引数4個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A4, A5, A6, A7)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2,
     A3 a3){
		typedef Function<R(*)(A4, A5, A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 3> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A4, A5, A6, A7)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3){
		typedef Function<R(*)(A4, A5, A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 3> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3), true);
	}


	// 引数7個のメソッドに、
	// thisと3個の引数をbindして、
	// 引数4個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7>
	Function<R(*)(A4, A5, A6, A7)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7), T * instance, A1 a1,
     A2 a2, A3 a3){
		typedef Function<R(*)(A4, A5, A6, A7)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7), 3> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3), true);
	}


	// 引数7個の関数に、4個の引数をbindして、
	// 引数3個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A5, A6, A7)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2,
     A3 a3, A4 a4){
		typedef Function<R(*)(A5, A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 4> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A5, A6, A7)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3, A4 a4){
		typedef Function<R(*)(A5, A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 4> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4), true);
	}


	// 引数7個のメソッドに、
	// thisと4個の引数をbindして、
	// 引数3個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7>
	Function<R(*)(A5, A6, A7)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7), T * instance, A1 a1,
     A2 a2, A3 a3, A4 a4){
		typedef Function<R(*)(A5, A6, A7)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7), 4> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4), true);
	}


	// 引数7個の関数に、5個の引数をbindして、
	// 引数2個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A6, A7)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)(A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 5> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A6, A7)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)(A6, A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 5> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5), true);
	}


	// 引数7個のメソッドに、
	// thisと5個の引数をbindして、
	// 引数2個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7>
	Function<R(*)(A6, A7)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7), T * instance, A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)(A6, A7)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7), 5> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5), true);
	}


	// 引数7個の関数に、6個の引数をbindして、
	// 引数1個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A7)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5, A6 a6){
		typedef Function<R(*)(A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 6> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5, a6), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A7)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){
		typedef Function<R(*)(A7)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 6> Binder;
  return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5, a6),
      true);
	}


	// 引数7個のメソッドに、
	// thisと6個の引数をbindして、
	// 引数1個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7>
	Function<R(*)(A7)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7), T * instance, A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){
		typedef Function<R(*)(A7)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7), 6> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5, a6), true);
	}


	// 引数7個の関数に、7個の引数をbindして、
	// 引数0個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)()>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 7> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5, a6, a7), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)()>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7), 7> Binder;
  return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5, a6, a7),
      true);
	}


	// 引数7個のメソッドに、
	// thisと7個の引数をbindして、
	// 引数0個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7>
	Function<R(*)()>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7), T * instance, A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
		typedef Function<R(*)()> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7), 7> Binder;
  return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5, a6, a7),
      true);
	}


	// 引数8個のメソッドに、
	// thisと0個の引数をbindして、
	// 引数8個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>
	FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7, A8), T * instance){
		typedef Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7, A8), 0> Binder;
		return Bound(ICK_NEW(Binder, method, instance), true);
	}


	// 引数8個の関数に、1個の引数をbindして、
	// 引数7個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A2, A3, A4, A5, A6, A7, A8)>
	FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7, A8), A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5, A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 1> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A2, A3, A4, A5, A6, A7, A8)>
	FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5, A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 1> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1), true);
	}


	// 引数8個のメソッドに、
	// thisと1個の引数をbindして、
	// 引数7個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A2, A3, A4, A5, A6, A7, A8)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7, A8), T * instance,
     A1 a1){
		typedef Function<R(*)(A2, A3, A4, A5, A6, A7, A8)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7, A8), 1> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1), true);
	}


	// 引数8個の関数に、2個の引数をbindして、
	// 引数6個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A3, A4, A5, A6, A7, A8)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7, A8), A1 a1,
     A2 a2){
		typedef Function<R(*)(A3, A4, A5, A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 2> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A3, A4, A5, A6, A7, A8)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2){
		typedef Function<R(*)(A3, A4, A5, A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 2> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2), true);
	}


	// 引数8個のメソッドに、
	// thisと2個の引数をbindして、
	// 引数6個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A3, A4, A5, A6, A7, A8)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7, A8), T * instance,
     A1 a1, A2 a2){
		typedef Function<R(*)(A3, A4, A5, A6, A7, A8)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7, A8), 2> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2), true);
	}


	// 引数8個の関数に、3個の引数をbindして、
	// 引数5個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A4, A5, A6, A7, A8)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7, A8), A1 a1,
     A2 a2, A3 a3){
		typedef Function<R(*)(A4, A5, A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 3> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A4, A5, A6, A7, A8)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3){
		typedef Function<R(*)(A4, A5, A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 3> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3), true);
	}


	// 引数8個のメソッドに、
	// thisと3個の引数をbindして、
	// 引数5個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A4, A5, A6, A7, A8)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7, A8), T * instance,
     A1 a1, A2 a2, A3 a3){
		typedef Function<R(*)(A4, A5, A6, A7, A8)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7, A8), 3> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3), true);
	}


	// 引数8個の関数に、4個の引数をbindして、
	// 引数4個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A5, A6, A7, A8)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7, A8), A1 a1,
     A2 a2, A3 a3, A4 a4){
		typedef Function<R(*)(A5, A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 4> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A5, A6, A7, A8)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4){
		typedef Function<R(*)(A5, A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 4> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4), true);
	}


	// 引数8個のメソッドに、
	// thisと4個の引数をbindして、
	// 引数4個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A5, A6, A7, A8)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7, A8), T * instance,
     A1 a1, A2 a2, A3 a3, A4 a4){
		typedef Function<R(*)(A5, A6, A7, A8)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7, A8), 4> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4), true);
	}


	// 引数8個の関数に、5個の引数をbindして、
	// 引数3個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A6, A7, A8)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7, A8), A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)(A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 5> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A6, A7, A8)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)(A6, A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 5> Binder;
		return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5), true);
	}


	// 引数8個のメソッドに、
	// thisと5個の引数をbindして、
	// 引数3個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A6, A7, A8)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7, A8), T * instance,
     A1 a1, A2 a2, A3 a3, A4 a4, A5 a5){
		typedef Function<R(*)(A6, A7, A8)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7, A8), 5> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5), true);
	}


	// 引数8個の関数に、6個の引数をbindして、
	// 引数2個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A7, A8)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7, A8), A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){
		typedef Function<R(*)(A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 6> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5, a6), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A7, A8)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){
		typedef Function<R(*)(A7, A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 6> Binder;
  return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5, a6),
      true);
	}


	// 引数8個のメソッドに、
	// thisと6個の引数をbindして、
	// 引数2個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A7, A8)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7, A8), T * instance,
     A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){
		typedef Function<R(*)(A7, A8)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7, A8), 6> Binder;
		return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5, a6), true);
	}


	// 引数8個の関数に、7個の引数をbindして、
	// 引数1個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A8)>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7, A8), A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
		typedef Function<R(*)(A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 7> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5, a6, a7), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A8)>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
		typedef Function<R(*)(A8)> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 7> Binder;
  return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5, a6, a7),
      true);
	}


	// 引数8個のメソッドに、
	// thisと7個の引数をbindして、
	// 引数1個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A8)>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7, A8), T * instance,
     A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
		typedef Function<R(*)(A8)> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7, A8), 7> Binder;
  return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5, a6, a7),
      true);
	}


	// 引数8個の関数に、8個の引数をbindして、
	// 引数0個の関数にする。
 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)()>
 FunctionBind(R(*native_function)(A1, A2, A3, A4, A5, A6, A7, A8), A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 8> Binder;
		typedef NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder, a1, a2, a3, a4, a5, a6, a7, a8), true);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)()>
 FunctionBind(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8){
		typedef Function<R(*)()> Bound;
		typedef FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8), 8> Binder;
  return Bound(ICK_NEW(Binder, function.holder(), a1, a2, a3, a4, a5, a6, a7,
      a8), true);
	}


	// 引数8個のメソッドに、
	// thisと8個の引数をbindして、
	// 引数0個の関数にする。
 template <class T, typename R, typename A1, typename A2, typename A3,
     typename A4, typename A5, typename A6, typename A7, typename A8>
	Function<R(*)()>
 FunctionBind(R(T::*method)(A1, A2, A3, A4, A5, A6, A7, A8), T * instance,
     A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8){
		typedef Function<R(*)()> Bound;
		typedef MethodBinder<R(T::*)(A1, A2, A3, A4, A5, A6, A7, A8), 8> Binder;
  return Bound(ICK_NEW(Binder, method, instance, a1, a2, a3, a4, a5, a6, a7,
      a8), true);
	}


}
