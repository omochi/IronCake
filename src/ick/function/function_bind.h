// This file was GENERATED by command:
//     pump.py function_bind.h.pump
// DO NOT EDIT BY HAND!!!

#pragma once

#include "../base/memory.h"

#include "functor_holder.h"
#include "function.h"

namespace ick {
	template <typename FP, int N> class FunctionBinder;


	template <typename R, typename A1>
	class FunctionBinder<R(*)(A1),1>{
	public:
		typedef R (*FunctionType)(A1);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		BaseFunctorHolder<FunctionType> * holder_;
		A1 a1_;
	public:
		FunctionBinder(const BaseFunctorHolder<FunctionType> & holder, A1 a1):
		a1_(a1)
		{
			holder_ = holder.Clone();
		}
		FunctionBinder(const FunctionBinder & copy):
		a1_(copy.a1)
		{
			holder_ = copy.holder_->Clone();
		}
		virtual ~FunctionBinder(){
			ICK_DELETE(holder_);
		}
		virtual R operator() () {
			return (*holder_)(a1_ );
		}
	};


	template <typename R, typename A1, typename A2>
	class FunctionBinder<R(*)(A1, A2),1>{
	public:
		typedef R (*FunctionType)(A1, A2);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		BaseFunctorHolder<FunctionType> * holder_;
		A1 a1_;
	public:
		FunctionBinder(const BaseFunctorHolder<FunctionType> & holder, A1 a1):
		a1_(a1)
		{
			holder_ = holder.Clone();
		}
		FunctionBinder(const FunctionBinder & copy):
		a1_(copy.a1)
		{
			holder_ = copy.holder_->Clone();
		}
		virtual ~FunctionBinder(){
			ICK_DELETE(holder_);
		}
		virtual R operator() (A2 a2) {
			return (*holder_)(a1_ , a2);
		}
	};


	template <typename R, typename A1, typename A2>
	class FunctionBinder<R(*)(A1, A2),2>{
	public:
		typedef R (*FunctionType)(A1, A2);
		typedef FunctionBinder<FunctionType,2> ThisType;
	private:
		BaseFunctorHolder<FunctionType> * holder_;
		A1 a1_; A2 a2_;
	public:
		FunctionBinder(const BaseFunctorHolder<FunctionType> & holder, A1 a1, A2 a2):
		a1_(a1), a2_(a2)
		{
			holder_ = holder.Clone();
		}
		FunctionBinder(const FunctionBinder & copy):
		a1_(copy.a1), a2_(copy.a2)
		{
			holder_ = copy.holder_->Clone();
		}
		virtual ~FunctionBinder(){
			ICK_DELETE(holder_);
		}
		virtual R operator() () {
			return (*holder_)(a1_, a2_ );
		}
	};


}
