// This file was GENERATED by command:
//     pump.py function_bind.h.pump
// DO NOT EDIT BY HAND!!!

#pragma once

#include "../base/memory.h"

#include "function_bind_decl.h"
#include "functor_holder.h"
#include "function.h"

namespace ick {
	template <typename FP, int N> class FunctionBinder;


	template <typename R, typename A1>
	class FunctionBinder<R(*)(A1),1>{
	public:
		typedef R (*FunctionType)(A1);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		Function<R(*)(A1)> function_;
		A1 a1_;
	public:
		FunctionBinder(const Function<R(*)(A1)> & function, A1 a1):
		function_(function),
		a1_(a1)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() () {
			return function_(a1_ );
		}
	};

	template <typename R, typename A1>
	Function<R(*)()>
	FunctionBind1(Function<R(*)(A1)> function , A1 a1){
		return FunctionMake<FunctionBinder<R(*)(A1),1>,R(*)()>(
			FunctionBinder<R(*)(A1),1>(function , a1)
		);
	}

	template <typename R, typename A1>
	Function<R(*)()>
	FunctionBind1(R (*function)(A1) , A1 a1){
		return FunctionBind1(Function<R(*)(A1)>(function)
			, a1);
	}


	template <typename R, typename A1, typename A2>
	class FunctionBinder<R(*)(A1, A2),1>{
	public:
		typedef R (*FunctionType)(A1, A2);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		Function<R(*)(A1, A2)> function_;
		A1 a1_;
	public:
		FunctionBinder(const Function<R(*)(A1, A2)> & function, A1 a1):
		function_(function),
		a1_(a1)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A2 a2) {
			return function_(a1_ , a2);
		}
	};

	template <typename R, typename A1, typename A2>
	Function<R(*)(A2)>
	FunctionBind1(Function<R(*)(A1, A2)> function , A1 a1){
		return FunctionMake<FunctionBinder<R(*)(A1, A2),1>,R(*)(A2)>(
			FunctionBinder<R(*)(A1, A2),1>(function , a1)
		);
	}

	template <typename R, typename A1, typename A2>
	Function<R(*)(A2)>
	FunctionBind1(R (*function)(A1, A2) , A1 a1){
		return FunctionBind1(Function<R(*)(A1, A2)>(function)
			, a1);
	}


	template <typename R, typename A1, typename A2>
	class FunctionBinder<R(*)(A1, A2),2>{
	public:
		typedef R (*FunctionType)(A1, A2);
		typedef FunctionBinder<FunctionType,2> ThisType;
	private:
		Function<R(*)(A1, A2)> function_;
		A1 a1_; A2 a2_;
	public:
		FunctionBinder(const Function<R(*)(A1, A2)> & function, A1 a1, A2 a2):
		function_(function),
		a1_(a1), a2_(a2)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() () {
			return function_(a1_, a2_ );
		}
	};

	template <typename R, typename A1, typename A2>
	Function<R(*)()>
	FunctionBind2(Function<R(*)(A1, A2)> function , A1 a1, A2 a2){
		return FunctionMake<FunctionBinder<R(*)(A1, A2),2>,R(*)()>(
			FunctionBinder<R(*)(A1, A2),2>(function , a1, a2)
		);
	}

	template <typename R, typename A1, typename A2>
	Function<R(*)()>
	FunctionBind2(R (*function)(A1, A2) , A1 a1, A2 a2){
		return FunctionBind2(Function<R(*)(A1, A2)>(function)
			, a1, a2);
	}


	template <typename R, typename A1, typename A2, typename A3>
	class FunctionBinder<R(*)(A1, A2, A3),1>{
	public:
		typedef R (*FunctionType)(A1, A2, A3);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		Function<R(*)(A1, A2, A3)> function_;
		A1 a1_;
	public:
		FunctionBinder(const Function<R(*)(A1, A2, A3)> & function, A1 a1):
		function_(function),
		a1_(a1)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A2 a2, A3 a3) {
			return function_(a1_ , a2, a3);
		}
	};

	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A2, A3)>
	FunctionBind1(Function<R(*)(A1, A2, A3)> function , A1 a1){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3),1>,R(*)(A2, A3)>(
			FunctionBinder<R(*)(A1, A2, A3),1>(function , a1)
		);
	}

	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A2, A3)>
	FunctionBind1(R (*function)(A1, A2, A3) , A1 a1){
		return FunctionBind1(Function<R(*)(A1, A2, A3)>(function)
			, a1);
	}


	template <typename R, typename A1, typename A2, typename A3>
	class FunctionBinder<R(*)(A1, A2, A3),2>{
	public:
		typedef R (*FunctionType)(A1, A2, A3);
		typedef FunctionBinder<FunctionType,2> ThisType;
	private:
		Function<R(*)(A1, A2, A3)> function_;
		A1 a1_; A2 a2_;
	public:
		FunctionBinder(const Function<R(*)(A1, A2, A3)> & function, A1 a1, A2 a2):
		function_(function),
		a1_(a1), a2_(a2)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A3 a3) {
			return function_(a1_, a2_ , a3);
		}
	};

	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A3)>
	FunctionBind2(Function<R(*)(A1, A2, A3)> function , A1 a1, A2 a2){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3),2>,R(*)(A3)>(
			FunctionBinder<R(*)(A1, A2, A3),2>(function , a1, a2)
		);
	}

	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)(A3)>
	FunctionBind2(R (*function)(A1, A2, A3) , A1 a1, A2 a2){
		return FunctionBind2(Function<R(*)(A1, A2, A3)>(function)
			, a1, a2);
	}


	template <typename R, typename A1, typename A2, typename A3>
	class FunctionBinder<R(*)(A1, A2, A3),3>{
	public:
		typedef R (*FunctionType)(A1, A2, A3);
		typedef FunctionBinder<FunctionType,3> ThisType;
	private:
		Function<R(*)(A1, A2, A3)> function_;
		A1 a1_; A2 a2_; A3 a3_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3)> & function, A1 a1, A2 a2,
      A3 a3):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() () {
			return function_(a1_, a2_, a3_ );
		}
	};

	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)()>
	FunctionBind3(Function<R(*)(A1, A2, A3)> function , A1 a1, A2 a2, A3 a3){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3),3>,R(*)()>(
			FunctionBinder<R(*)(A1, A2, A3),3>(function , a1, a2, a3)
		);
	}

	template <typename R, typename A1, typename A2, typename A3>
	Function<R(*)()>
	FunctionBind3(R (*function)(A1, A2, A3) , A1 a1, A2 a2, A3 a3){
		return FunctionBind3(Function<R(*)(A1, A2, A3)>(function)
			, a1, a2, a3);
	}


	template <typename R, typename A1, typename A2, typename A3, typename A4>
	class FunctionBinder<R(*)(A1, A2, A3, A4),1>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4)> function_;
		A1 a1_;
	public:
		FunctionBinder(const Function<R(*)(A1, A2, A3, A4)> & function, A1 a1):
		function_(function),
		a1_(a1)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A2 a2, A3 a3, A4 a4) {
			return function_(a1_ , a2, a3, a4);
		}
	};

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A2, A3, A4)>
	FunctionBind1(Function<R(*)(A1, A2, A3, A4)> function , A1 a1){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4),1>,R(*)(A2, A3, A4)>(
			FunctionBinder<R(*)(A1, A2, A3, A4),1>(function , a1)
		);
	}

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A2, A3, A4)>
	FunctionBind1(R (*function)(A1, A2, A3, A4) , A1 a1){
		return FunctionBind1(Function<R(*)(A1, A2, A3, A4)>(function)
			, a1);
	}


	template <typename R, typename A1, typename A2, typename A3, typename A4>
	class FunctionBinder<R(*)(A1, A2, A3, A4),2>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4);
		typedef FunctionBinder<FunctionType,2> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4)> function_;
		A1 a1_; A2 a2_;
	public:
		FunctionBinder(const Function<R(*)(A1, A2, A3, A4)> & function, A1 a1, A2 a2):
		function_(function),
		a1_(a1), a2_(a2)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A3 a3, A4 a4) {
			return function_(a1_, a2_ , a3, a4);
		}
	};

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A3, A4)>
	FunctionBind2(Function<R(*)(A1, A2, A3, A4)> function , A1 a1, A2 a2){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4),2>,R(*)(A3, A4)>(
			FunctionBinder<R(*)(A1, A2, A3, A4),2>(function , a1, a2)
		);
	}

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A3, A4)>
	FunctionBind2(R (*function)(A1, A2, A3, A4) , A1 a1, A2 a2){
		return FunctionBind2(Function<R(*)(A1, A2, A3, A4)>(function)
			, a1, a2);
	}


	template <typename R, typename A1, typename A2, typename A3, typename A4>
	class FunctionBinder<R(*)(A1, A2, A3, A4),3>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4);
		typedef FunctionBinder<FunctionType,3> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4)> function_;
		A1 a1_; A2 a2_; A3 a3_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4)> & function, A1 a1, A2 a2,
      A3 a3):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A4 a4) {
			return function_(a1_, a2_, a3_ , a4);
		}
	};

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A4)>
	FunctionBind3(Function<R(*)(A1, A2, A3, A4)> function , A1 a1, A2 a2, A3 a3){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4),3>,R(*)(A4)>(
			FunctionBinder<R(*)(A1, A2, A3, A4),3>(function , a1, a2, a3)
		);
	}

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)(A4)>
	FunctionBind3(R (*function)(A1, A2, A3, A4) , A1 a1, A2 a2, A3 a3){
		return FunctionBind3(Function<R(*)(A1, A2, A3, A4)>(function)
			, a1, a2, a3);
	}


	template <typename R, typename A1, typename A2, typename A3, typename A4>
	class FunctionBinder<R(*)(A1, A2, A3, A4),4>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4);
		typedef FunctionBinder<FunctionType,4> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4)> & function, A1 a1, A2 a2,
      A3 a3, A4 a4):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() () {
			return function_(a1_, a2_, a3_, a4_ );
		}
	};

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)()>
 FunctionBind4(Function<R(*)(A1, A2, A3, A4)> function , A1 a1, A2 a2, A3 a3,
     A4 a4){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4),4>,R(*)()>(
			FunctionBinder<R(*)(A1, A2, A3, A4),4>(function , a1, a2, a3, a4)
		);
	}

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	Function<R(*)()>
	FunctionBind4(R (*function)(A1, A2, A3, A4) , A1 a1, A2 a2, A3 a3, A4 a4){
		return FunctionBind4(Function<R(*)(A1, A2, A3, A4)>(function)
			, a1, a2, a3, a4);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5),1>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5)> function_;
		A1 a1_;
	public:
		FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5)> & function, A1 a1):
		function_(function),
		a1_(a1)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A2 a2, A3 a3, A4 a4, A5 a5) {
			return function_(a1_ , a2, a3, a4, a5);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A2, A3, A4, A5)>
	FunctionBind1(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5),1>,R(*)(A2, A3,
      A4, A5)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5),1>(function , a1)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A2, A3, A4, A5)>
	FunctionBind1(R (*function)(A1, A2, A3, A4, A5) , A1 a1){
		return FunctionBind1(Function<R(*)(A1, A2, A3, A4, A5)>(function)
			, a1);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5),2>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5);
		typedef FunctionBinder<FunctionType,2> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5)> function_;
		A1 a1_; A2 a2_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5)> & function, A1 a1,
      A2 a2):
		function_(function),
		a1_(a1), a2_(a2)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A3 a3, A4 a4, A5 a5) {
			return function_(a1_, a2_ , a3, a4, a5);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A3, A4, A5)>
	FunctionBind2(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1, A2 a2){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5),2>,R(*)(A3, A4,
      A5)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5),2>(function , a1, a2)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A3, A4, A5)>
	FunctionBind2(R (*function)(A1, A2, A3, A4, A5) , A1 a1, A2 a2){
		return FunctionBind2(Function<R(*)(A1, A2, A3, A4, A5)>(function)
			, a1, a2);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5),3>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5);
		typedef FunctionBinder<FunctionType,3> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5)> function_;
		A1 a1_; A2 a2_; A3 a3_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5)> & function, A1 a1,
      A2 a2, A3 a3):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A4 a4, A5 a5) {
			return function_(a1_, a2_, a3_ , a4, a5);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A4, A5)>
 FunctionBind3(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1, A2 a2,
     A3 a3){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5),3>,R(*)(A4, A5)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5),3>(function , a1, a2, a3)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A4, A5)>
	FunctionBind3(R (*function)(A1, A2, A3, A4, A5) , A1 a1, A2 a2, A3 a3){
		return FunctionBind3(Function<R(*)(A1, A2, A3, A4, A5)>(function)
			, a1, a2, a3);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5),4>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5);
		typedef FunctionBinder<FunctionType,4> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5)> & function, A1 a1,
      A2 a2, A3 a3, A4 a4):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A5 a5) {
			return function_(a1_, a2_, a3_, a4_ , a5);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A5)>
 FunctionBind4(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1, A2 a2,
     A3 a3, A4 a4){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5),4>,R(*)(A5)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5),4>(function , a1, a2, a3, a4)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)(A5)>
	FunctionBind4(R (*function)(A1, A2, A3, A4, A5) , A1 a1, A2 a2, A3 a3, A4 a4){
		return FunctionBind4(Function<R(*)(A1, A2, A3, A4, A5)>(function)
			, a1, a2, a3, a4);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5),5>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5);
		typedef FunctionBinder<FunctionType,5> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5)> & function, A1 a1,
      A2 a2, A3 a3, A4 a4, A5 a5):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() () {
			return function_(a1_, a2_, a3_, a4_, a5_ );
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)()>
 FunctionBind5(Function<R(*)(A1, A2, A3, A4, A5)> function , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5),5>,R(*)()>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5),5>(function , a1, a2, a3, a4, a5)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	Function<R(*)()>
 FunctionBind5(R (*function)(A1, A2, A3, A4, A5) , A1 a1, A2 a2, A3 a3, A4 a4,
     A5 a5){
		return FunctionBind5(Function<R(*)(A1, A2, A3, A4, A5)>(function)
			, a1, a2, a3, a4, a5);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),1>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6)> function_;
		A1 a1_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6)> & function,
      A1 a1):
		function_(function),
		a1_(a1)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
			return function_(a1_ , a2, a3, a4, a5, a6);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A2, A3, A4, A5, A6)>
	FunctionBind1(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),1>,R(*)(A2,
      A3, A4, A5, A6)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),1>(function , a1)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A2, A3, A4, A5, A6)>
	FunctionBind1(R (*function)(A1, A2, A3, A4, A5, A6) , A1 a1){
		return FunctionBind1(Function<R(*)(A1, A2, A3, A4, A5, A6)>(function)
			, a1);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),2>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6);
		typedef FunctionBinder<FunctionType,2> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6)> function_;
		A1 a1_; A2 a2_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6)> & function,
      A1 a1, A2 a2):
		function_(function),
		a1_(a1), a2_(a2)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A3 a3, A4 a4, A5 a5, A6 a6) {
			return function_(a1_, a2_ , a3, a4, a5, a6);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A3, A4, A5, A6)>
	FunctionBind2(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),2>,R(*)(A3,
      A4, A5, A6)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),2>(function , a1, a2)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A3, A4, A5, A6)>
	FunctionBind2(R (*function)(A1, A2, A3, A4, A5, A6) , A1 a1, A2 a2){
		return FunctionBind2(Function<R(*)(A1, A2, A3, A4, A5, A6)>(function)
			, a1, a2);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),3>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6);
		typedef FunctionBinder<FunctionType,3> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6)> function_;
		A1 a1_; A2 a2_; A3 a3_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6)> & function,
      A1 a1, A2 a2, A3 a3):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A4 a4, A5 a5, A6 a6) {
			return function_(a1_, a2_, a3_ , a4, a5, a6);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A4, A5, A6)>
 FunctionBind3(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2,
     A3 a3){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),3>,R(*)(A4,
      A5, A6)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),3>(function , a1, a2, a3)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A4, A5, A6)>
	FunctionBind3(R (*function)(A1, A2, A3, A4, A5, A6) , A1 a1, A2 a2, A3 a3){
		return FunctionBind3(Function<R(*)(A1, A2, A3, A4, A5, A6)>(function)
			, a1, a2, a3);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),4>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6);
		typedef FunctionBinder<FunctionType,4> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6)> & function,
      A1 a1, A2 a2, A3 a3, A4 a4):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A5 a5, A6 a6) {
			return function_(a1_, a2_, a3_, a4_ , a5, a6);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A5, A6)>
 FunctionBind4(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2,
     A3 a3, A4 a4){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),4>,R(*)(A5,
      A6)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),4>(function , a1, a2, a3, a4)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A5, A6)>
 FunctionBind4(R (*function)(A1, A2, A3, A4, A5, A6) , A1 a1, A2 a2, A3 a3,
     A4 a4){
		return FunctionBind4(Function<R(*)(A1, A2, A3, A4, A5, A6)>(function)
			, a1, a2, a3, a4);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),5>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6);
		typedef FunctionBinder<FunctionType,5> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6)> & function,
      A1 a1, A2 a2, A3 a3, A4 a4, A5 a5):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A6 a6) {
			return function_(a1_, a2_, a3_, a4_, a5_ , a6);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A6)>
 FunctionBind5(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),5>,R(*)(A6)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),5>(function , a1, a2, a3, a4, a5)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)(A6)>
 FunctionBind5(R (*function)(A1, A2, A3, A4, A5, A6) , A1 a1, A2 a2, A3 a3,
     A4 a4, A5 a5){
		return FunctionBind5(Function<R(*)(A1, A2, A3, A4, A5, A6)>(function)
			, a1, a2, a3, a4, a5);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),6>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6);
		typedef FunctionBinder<FunctionType,6> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6)> & function,
      A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5), a6_(a6)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() () {
			return function_(a1_, a2_, a3_, a4_, a5_, a6_ );
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)()>
 FunctionBind6(Function<R(*)(A1, A2, A3, A4, A5, A6)> function , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5, A6 a6){
		return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),6>,R(*)()>(
   FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6),6>(function , a1, a2, a3, a4,
       a5, a6)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	Function<R(*)()>
 FunctionBind6(R (*function)(A1, A2, A3, A4, A5, A6) , A1 a1, A2 a2, A3 a3,
     A4 a4, A5 a5, A6 a6){
		return FunctionBind6(Function<R(*)(A1, A2, A3, A4, A5, A6)>(function)
			, a1, a2, a3, a4, a5, a6);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),1>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function_;
		A1 a1_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> & function,
      A1 a1):
		function_(function),
		a1_(a1)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
			return function_(a1_ , a2, a3, a4, a5, a6, a7);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A2, A3, A4, A5, A6, A7)>
	FunctionBind1(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),1>,
      R(*)(A2, A3, A4, A5, A6, A7)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),1>(function , a1)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A2, A3, A4, A5, A6, A7)>
	FunctionBind1(R (*function)(A1, A2, A3, A4, A5, A6, A7) , A1 a1){
		return FunctionBind1(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)>(function)
			, a1);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),2>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7);
		typedef FunctionBinder<FunctionType,2> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function_;
		A1 a1_; A2 a2_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> & function,
      A1 a1, A2 a2):
		function_(function),
		a1_(a1), a2_(a2)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
			return function_(a1_, a2_ , a3, a4, a5, a6, a7);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A3, A4, A5, A6, A7)>
 FunctionBind2(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),2>,
      R(*)(A3, A4, A5, A6, A7)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),2>(function , a1, a2)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A3, A4, A5, A6, A7)>
	FunctionBind2(R (*function)(A1, A2, A3, A4, A5, A6, A7) , A1 a1, A2 a2){
		return FunctionBind2(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)>(function)
			, a1, a2);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),3>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7);
		typedef FunctionBinder<FunctionType,3> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function_;
		A1 a1_; A2 a2_; A3 a3_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> & function,
      A1 a1, A2 a2, A3 a3):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A4 a4, A5 a5, A6 a6, A7 a7) {
			return function_(a1_, a2_, a3_ , a4, a5, a6, a7);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A4, A5, A6, A7)>
 FunctionBind3(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),3>,
      R(*)(A4, A5, A6, A7)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),3>(function , a1, a2, a3)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A4, A5, A6, A7)>
	FunctionBind3(R (*function)(A1, A2, A3, A4, A5, A6, A7) , A1 a1, A2 a2, A3 a3){
		return FunctionBind3(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)>(function)
			, a1, a2, a3);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),4>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7);
		typedef FunctionBinder<FunctionType,4> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> & function,
      A1 a1, A2 a2, A3 a3, A4 a4):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A5 a5, A6 a6, A7 a7) {
			return function_(a1_, a2_, a3_, a4_ , a5, a6, a7);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A5, A6, A7)>
 FunctionBind4(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3, A4 a4){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),4>,
      R(*)(A5, A6, A7)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),4>(function , a1, a2, a3, a4)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A5, A6, A7)>
 FunctionBind4(R (*function)(A1, A2, A3, A4, A5, A6, A7) , A1 a1, A2 a2, A3 a3,
     A4 a4){
		return FunctionBind4(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)>(function)
			, a1, a2, a3, a4);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),5>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7);
		typedef FunctionBinder<FunctionType,5> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> & function,
      A1 a1, A2 a2, A3 a3, A4 a4, A5 a5):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A6 a6, A7 a7) {
			return function_(a1_, a2_, a3_, a4_, a5_ , a6, a7);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A6, A7)>
 FunctionBind5(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),5>,
      R(*)(A6, A7)>(
   FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),5>(function , a1, a2, a3,
       a4, a5)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A6, A7)>
 FunctionBind5(R (*function)(A1, A2, A3, A4, A5, A6, A7) , A1 a1, A2 a2, A3 a3,
     A4 a4, A5 a5){
		return FunctionBind5(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)>(function)
			, a1, a2, a3, a4, a5);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),6>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7);
		typedef FunctionBinder<FunctionType,6> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> & function,
      A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5), a6_(a6)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A7 a7) {
			return function_(a1_, a2_, a3_, a4_, a5_, a6_ , a7);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A7)>
 FunctionBind6(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),6>,
      R(*)(A7)>(
   FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),6>(function , a1, a2, a3,
       a4, a5, a6)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)(A7)>
 FunctionBind6(R (*function)(A1, A2, A3, A4, A5, A6, A7) , A1 a1, A2 a2, A3 a3,
     A4 a4, A5 a5, A6 a6){
		return FunctionBind6(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)>(function)
			, a1, a2, a3, a4, a5, a6);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),7>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7);
		typedef FunctionBinder<FunctionType,7> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> & function,
      A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5), a6_(a6), a7_(a7)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() () {
			return function_(a1_, a2_, a3_, a4_, a5_, a6_, a7_ );
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)()>
 FunctionBind7(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),7>,
      R(*)()>(
   FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7),7>(function , a1, a2, a3,
       a4, a5, a6, a7)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	Function<R(*)()>
 FunctionBind7(R (*function)(A1, A2, A3, A4, A5, A6, A7) , A1 a1, A2 a2, A3 a3,
     A4 a4, A5 a5, A6 a6, A7 a7){
		return FunctionBind7(Function<R(*)(A1, A2, A3, A4, A5, A6, A7)>(function)
			, a1, a2, a3, a4, a5, a6, a7);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),1>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7, A8);
		typedef FunctionBinder<FunctionType,1> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function_;
		A1 a1_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7,
      A8)> & function, A1 a1):
		function_(function),
		a1_(a1)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) {
			return function_(a1_ , a2, a3, a4, a5, a6, a7, a8);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A2, A3, A4, A5, A6, A7, A8)>
	FunctionBind1(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),1>,
      R(*)(A2, A3, A4, A5, A6, A7, A8)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),1>(function , a1)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A2, A3, A4, A5, A6, A7, A8)>
	FunctionBind1(R (*function)(A1, A2, A3, A4, A5, A6, A7, A8) , A1 a1){
		return FunctionBind1(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>(function)
			, a1);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),2>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7, A8);
		typedef FunctionBinder<FunctionType,2> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function_;
		A1 a1_; A2 a2_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7,
      A8)> & function, A1 a1, A2 a2):
		function_(function),
		a1_(a1), a2_(a2)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) {
			return function_(a1_, a2_ , a3, a4, a5, a6, a7, a8);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A3, A4, A5, A6, A7, A8)>
 FunctionBind2(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),2>,
      R(*)(A3, A4, A5, A6, A7, A8)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),2>(function , a1, a2)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A3, A4, A5, A6, A7, A8)>
	FunctionBind2(R (*function)(A1, A2, A3, A4, A5, A6, A7, A8) , A1 a1, A2 a2){
		return FunctionBind2(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>(function)
			, a1, a2);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),3>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7, A8);
		typedef FunctionBinder<FunctionType,3> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function_;
		A1 a1_; A2 a2_; A3 a3_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7,
      A8)> & function, A1 a1, A2 a2, A3 a3):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) {
			return function_(a1_, a2_, a3_ , a4, a5, a6, a7, a8);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A4, A5, A6, A7, A8)>
 FunctionBind3(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),3>,
      R(*)(A4, A5, A6, A7, A8)>(
			FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),3>(function , a1, a2, a3)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A4, A5, A6, A7, A8)>
 FunctionBind3(R (*function)(A1, A2, A3, A4, A5, A6, A7, A8) , A1 a1, A2 a2,
     A3 a3){
		return FunctionBind3(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>(function)
			, a1, a2, a3);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),4>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7, A8);
		typedef FunctionBinder<FunctionType,4> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7,
      A8)> & function, A1 a1, A2 a2, A3 a3, A4 a4):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A5 a5, A6 a6, A7 a7, A8 a8) {
			return function_(a1_, a2_, a3_, a4_ , a5, a6, a7, a8);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A5, A6, A7, A8)>
 FunctionBind4(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),4>,
      R(*)(A5, A6, A7, A8)>(
   FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),4>(function , a1, a2,
       a3, a4)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A5, A6, A7, A8)>
 FunctionBind4(R (*function)(A1, A2, A3, A4, A5, A6, A7, A8) , A1 a1, A2 a2,
     A3 a3, A4 a4){
		return FunctionBind4(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>(function)
			, a1, a2, a3, a4);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),5>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7, A8);
		typedef FunctionBinder<FunctionType,5> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7,
      A8)> & function, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A6 a6, A7 a7, A8 a8) {
			return function_(a1_, a2_, a3_, a4_, a5_ , a6, a7, a8);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A6, A7, A8)>
 FunctionBind5(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),5>,
      R(*)(A6, A7, A8)>(
   FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),5>(function , a1, a2,
       a3, a4, a5)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A6, A7, A8)>
 FunctionBind5(R (*function)(A1, A2, A3, A4, A5, A6, A7, A8) , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5){
		return FunctionBind5(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>(function)
			, a1, a2, a3, a4, a5);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),6>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7, A8);
		typedef FunctionBinder<FunctionType,6> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7,
      A8)> & function, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5), a6_(a6)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A7 a7, A8 a8) {
			return function_(a1_, a2_, a3_, a4_, a5_, a6_ , a7, a8);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A7, A8)>
 FunctionBind6(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),6>,
      R(*)(A7, A8)>(
   FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),6>(function , a1, a2,
       a3, a4, a5, a6)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A7, A8)>
 FunctionBind6(R (*function)(A1, A2, A3, A4, A5, A6, A7, A8) , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5, A6 a6){
		return FunctionBind6(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>(function)
			, a1, a2, a3, a4, a5, a6);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),7>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7, A8);
		typedef FunctionBinder<FunctionType,7> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7,
      A8)> & function, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5), a6_(a6), a7_(a7)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() (A8 a8) {
			return function_(a1_, a2_, a3_, a4_, a5_, a6_, a7_ , a8);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A8)>
 FunctionBind7(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),7>,
      R(*)(A8)>(
   FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),7>(function , a1, a2,
       a3, a4, a5, a6, a7)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)(A8)>
 FunctionBind7(R (*function)(A1, A2, A3, A4, A5, A6, A7, A8) , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
		return FunctionBind7(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>(function)
			, a1, a2, a3, a4, a5, a6, a7);
	}


 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	class FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),8>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7, A8);
		typedef FunctionBinder<FunctionType,8> ThisType;
	private:
		Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function_;
		A1 a1_; A2 a2_; A3 a3_; A4 a4_; A5 a5_; A6 a6_; A7 a7_; A8 a8_;
	public:
  FunctionBinder(const Function<R(*)(A1, A2, A3, A4, A5, A6, A7,
      A8)> & function, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8):
		function_(function),
		a1_(a1), a2_(a2), a3_(a3), a4_(a4), a5_(a5), a6_(a6), a7_(a7), a8_(a8)
		{
		}
		virtual ~FunctionBinder(){}

		virtual R operator() () {
			return function_(a1_, a2_, a3_, a4_, a5_, a6_, a7_, a8_ );
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)()>
 FunctionBind8(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> function , A1 a1,
     A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8){
  return FunctionMake<FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),8>,
      R(*)()>(
   FunctionBinder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8),8>(function , a1, a2,
       a3, a4, a5, a6, a7, a8)
		);
	}

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	Function<R(*)()>
 FunctionBind8(R (*function)(A1, A2, A3, A4, A5, A6, A7, A8) , A1 a1, A2 a2,
     A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8){
		return FunctionBind8(Function<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>(function)
			, a1, a2, a3, a4, a5, a6, a7, a8);
	}


}
