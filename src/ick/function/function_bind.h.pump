#pragma once

#include "../base/memory.h"

#include "function_bind_decl.h"
#include "native_function_holder.h"
#include "function.h"
#include "function_holder.h"
#include "function_binder.h"
#include "method_binder.h"

namespace ick {
	$var an_max = 8
	$range an 0..an_max $$ 元の関数の引数の数
	$for an [[
	$range ai 1..an
	$range bn 0..an $$ bindする引数の数
	$for bn [[
	$range bi 1..bn
	$var can = an - bn $$ bind後の関数の引数の数
	$range cai bn+1..an

	$$ 関数はbind0は無い
	$if ( bn > 0 ) [[

	// 引数$an個の関数に、$bn個の引数をbindして、
	// 引数$can個の関数にする。
	template <typename R$for ai [[, typename A$ai]]>
	Function<R(*)($for cai , [[A$cai]])> 
	FunctionBind(R(*native_function)($for ai , [[A$ai]])$for bi [[, A$bi a$bi]]){
		typedef Function<R(*)($for cai , [[A$cai]])> Bound;
		typedef FunctionBinder<R(*)($for ai , [[A$ai]]), $bn> Binder;
		typedef NativeFunctionHolder<R(*)($for ai , [[A$ai]])> Holder;
		Holder holder(native_function);
		return Bound(ICK_NEW(Binder, &holder$for bi [[, a$bi]]), true);
	}

	template <typename R$for ai [[, typename A$ai]]>
	Function<R(*)($for cai , [[A$cai]])> 
	FunctionBind(Function<R(*)($for ai , [[A$ai]])> function $for bi [[, A$bi a$bi]]){
		typedef Function<R(*)($for cai , [[A$cai]])> Bound;
		typedef FunctionBinder<R(*)($for ai , [[A$ai]]), $bn> Binder;
		return Bound(ICK_NEW(Binder, function.holder()$for bi [[, a$bi]]), true);
	}

	]]

	// 引数$an個のメソッドに、
	// thisと$bn個の引数をbindして、
	// 引数$can個の関数にする。
	template <class T, typename R$for ai [[, typename A$ai]]>
	Function<R(*)($for cai , [[A$cai]])> 
	FunctionBind(R(T::*method)($for ai , [[A$ai]]), T * instance$for bi [[, A$bi a$bi]]){
		typedef Function<R(*)($for cai , [[A$cai]])> Bound;
		typedef MethodBinder<R(T::*)($for ai , [[A$ai]]), $bn> Binder;
		return Bound(ICK_NEW(Binder, method, instance$for bi [[, a$bi]]), true);
	}

	]] $$ bindする引数の数
	]] $$ 元の関数の引数の数

}
