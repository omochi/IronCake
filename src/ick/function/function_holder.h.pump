#pragma once

#include "../base/memory.h"
#include "base_function_holder.h"
#include "function.h"

namespace ick {
	template <typename F> class FunctionHolder;
	$var an_max = 8
	$range an 0..an_max
	$for an [[
	$range ai 1..an

	template <typename R$for ai [[, typename A$ai]]>
	class FunctionHolder<R(*)($for ai , [[A$ai]])> :
		public BaseFunctionHolder<R(*)($for ai , [[A$ai]])>{
	public:
		typedef R (*FunctionType)($for ai , [[A$ai]]);
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef FunctionHolder<FunctionType> ThisType;
	private:
		Function<FunctionType> function_;
	public:
		FunctionHolder(Function<FunctionType> function):
		function_(function)
		{}
		virtual ~FunctionHolder(){};
		virtual SuperType * Clone() const { 
			return ICK_NEW(ThisType, function_);
		}
		virtual R operator() ($for ai , [[A$ai a$ai]]){
			return function_($for ai , [[a$ai]]);
		}
	};
	]]

}
