// This file was GENERATED by command:
//     pump.py native_function_holder.h.pump
// DO NOT EDIT BY HAND!!!

#pragma once

#include "../base/memory.h"
#include "base_function_holder.h"

namespace ick {
	template <typename F> class NativeFunctionHolder;

	template <typename R>
	class NativeFunctionHolder<R(*)()> :
		public BaseFunctionHolder<R(*)()>{
	public:
		typedef R (*FunctionType)();
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef NativeFunctionHolder<FunctionType> ThisType;
	private:
		FunctionType native_function_;
	public:
		NativeFunctionHolder(FunctionType native_function):
		native_function_(native_function)
		{}
		virtual ~NativeFunctionHolder(){};
		virtual SuperType * Clone() const {
			return ICK_NEW(ThisType, native_function_);
		}
		virtual R operator() (){
			return (*native_function_)();
		}
	};

	template <typename R, typename A1>
	class NativeFunctionHolder<R(*)(A1)> :
		public BaseFunctionHolder<R(*)(A1)>{
	public:
		typedef R (*FunctionType)(A1);
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef NativeFunctionHolder<FunctionType> ThisType;
	private:
		FunctionType native_function_;
	public:
		NativeFunctionHolder(FunctionType native_function):
		native_function_(native_function)
		{}
		virtual ~NativeFunctionHolder(){};
		virtual SuperType * Clone() const {
			return ICK_NEW(ThisType, native_function_);
		}
		virtual R operator() (A1 a1){
			return (*native_function_)(a1);
		}
	};

	template <typename R, typename A1, typename A2>
	class NativeFunctionHolder<R(*)(A1, A2)> :
		public BaseFunctionHolder<R(*)(A1, A2)>{
	public:
		typedef R (*FunctionType)(A1, A2);
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef NativeFunctionHolder<FunctionType> ThisType;
	private:
		FunctionType native_function_;
	public:
		NativeFunctionHolder(FunctionType native_function):
		native_function_(native_function)
		{}
		virtual ~NativeFunctionHolder(){};
		virtual SuperType * Clone() const {
			return ICK_NEW(ThisType, native_function_);
		}
		virtual R operator() (A1 a1, A2 a2){
			return (*native_function_)(a1, a2);
		}
	};

	template <typename R, typename A1, typename A2, typename A3>
	class NativeFunctionHolder<R(*)(A1, A2, A3)> :
		public BaseFunctionHolder<R(*)(A1, A2, A3)>{
	public:
		typedef R (*FunctionType)(A1, A2, A3);
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef NativeFunctionHolder<FunctionType> ThisType;
	private:
		FunctionType native_function_;
	public:
		NativeFunctionHolder(FunctionType native_function):
		native_function_(native_function)
		{}
		virtual ~NativeFunctionHolder(){};
		virtual SuperType * Clone() const {
			return ICK_NEW(ThisType, native_function_);
		}
		virtual R operator() (A1 a1, A2 a2, A3 a3){
			return (*native_function_)(a1, a2, a3);
		}
	};

	template <typename R, typename A1, typename A2, typename A3, typename A4>
	class NativeFunctionHolder<R(*)(A1, A2, A3, A4)> :
		public BaseFunctionHolder<R(*)(A1, A2, A3, A4)>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4);
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef NativeFunctionHolder<FunctionType> ThisType;
	private:
		FunctionType native_function_;
	public:
		NativeFunctionHolder(FunctionType native_function):
		native_function_(native_function)
		{}
		virtual ~NativeFunctionHolder(){};
		virtual SuperType * Clone() const {
			return ICK_NEW(ThisType, native_function_);
		}
		virtual R operator() (A1 a1, A2 a2, A3 a3, A4 a4){
			return (*native_function_)(a1, a2, a3, a4);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5>
	class NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5)> :
		public BaseFunctionHolder<R(*)(A1, A2, A3, A4, A5)>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5);
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef NativeFunctionHolder<FunctionType> ThisType;
	private:
		FunctionType native_function_;
	public:
		NativeFunctionHolder(FunctionType native_function):
		native_function_(native_function)
		{}
		virtual ~NativeFunctionHolder(){};
		virtual SuperType * Clone() const {
			return ICK_NEW(ThisType, native_function_);
		}
		virtual R operator() (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5){
			return (*native_function_)(a1, a2, a3, a4, a5);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6>
	class NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6)> :
		public BaseFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6)>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6);
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef NativeFunctionHolder<FunctionType> ThisType;
	private:
		FunctionType native_function_;
	public:
		NativeFunctionHolder(FunctionType native_function):
		native_function_(native_function)
		{}
		virtual ~NativeFunctionHolder(){};
		virtual SuperType * Clone() const {
			return ICK_NEW(ThisType, native_function_);
		}
		virtual R operator() (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){
			return (*native_function_)(a1, a2, a3, a4, a5, a6);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7>
	class NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7)> :
		public BaseFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7)>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7);
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef NativeFunctionHolder<FunctionType> ThisType;
	private:
		FunctionType native_function_;
	public:
		NativeFunctionHolder(FunctionType native_function):
		native_function_(native_function)
		{}
		virtual ~NativeFunctionHolder(){};
		virtual SuperType * Clone() const {
			return ICK_NEW(ThisType, native_function_);
		}
		virtual R operator() (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){
			return (*native_function_)(a1, a2, a3, a4, a5, a6, a7);
		}
	};

 template <typename R, typename A1, typename A2, typename A3, typename A4,
     typename A5, typename A6, typename A7, typename A8>
	class NativeFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)> :
		public BaseFunctionHolder<R(*)(A1, A2, A3, A4, A5, A6, A7, A8)>{
	public:
		typedef R (*FunctionType)(A1, A2, A3, A4, A5, A6, A7, A8);
		typedef BaseFunctionHolder<FunctionType> SuperType;
		typedef NativeFunctionHolder<FunctionType> ThisType;
	private:
		FunctionType native_function_;
	public:
		NativeFunctionHolder(FunctionType native_function):
		native_function_(native_function)
		{}
		virtual ~NativeFunctionHolder(){};
		virtual SuperType * Clone() const {
			return ICK_NEW(ThisType, native_function_);
		}
		virtual R operator() (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8){
			return (*native_function_)(a1, a2, a3, a4, a5, a6, a7, a8);
		}
	};

}

